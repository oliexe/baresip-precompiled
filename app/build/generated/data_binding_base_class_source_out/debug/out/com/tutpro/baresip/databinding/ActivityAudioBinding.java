// Generated by view binder compiler. Do not edit!
package com.tutpro.baresip.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.tutpro.baresip.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityAudioBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final CheckBox Aec;

  @NonNull
  public final TextView AecTitle;

  @NonNull
  public final LinearLayout AudioModulesList;

  @NonNull
  public final TextView AudioModulesTitle;

  @NonNull
  public final ScrollView AudioView;

  @NonNull
  public final EditText OpusBitRate;

  @NonNull
  public final TextView OpusBitRateTitle;

  @NonNull
  public final EditText OpusPacketLoss;

  @NonNull
  public final TextView OpusPacketLossTitle;

  @NonNull
  public final Spinner VolumeSpinner;

  @NonNull
  public final TextView VolumeTitle;

  private ActivityAudioBinding(@NonNull ScrollView rootView, @NonNull CheckBox Aec,
      @NonNull TextView AecTitle, @NonNull LinearLayout AudioModulesList,
      @NonNull TextView AudioModulesTitle, @NonNull ScrollView AudioView,
      @NonNull EditText OpusBitRate, @NonNull TextView OpusBitRateTitle,
      @NonNull EditText OpusPacketLoss, @NonNull TextView OpusPacketLossTitle,
      @NonNull Spinner VolumeSpinner, @NonNull TextView VolumeTitle) {
    this.rootView = rootView;
    this.Aec = Aec;
    this.AecTitle = AecTitle;
    this.AudioModulesList = AudioModulesList;
    this.AudioModulesTitle = AudioModulesTitle;
    this.AudioView = AudioView;
    this.OpusBitRate = OpusBitRate;
    this.OpusBitRateTitle = OpusBitRateTitle;
    this.OpusPacketLoss = OpusPacketLoss;
    this.OpusPacketLossTitle = OpusPacketLossTitle;
    this.VolumeSpinner = VolumeSpinner;
    this.VolumeTitle = VolumeTitle;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityAudioBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityAudioBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_audio, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityAudioBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Aec;
      CheckBox Aec = ViewBindings.findChildViewById(rootView, id);
      if (Aec == null) {
        break missingId;
      }

      id = R.id.AecTitle;
      TextView AecTitle = ViewBindings.findChildViewById(rootView, id);
      if (AecTitle == null) {
        break missingId;
      }

      id = R.id.AudioModulesList;
      LinearLayout AudioModulesList = ViewBindings.findChildViewById(rootView, id);
      if (AudioModulesList == null) {
        break missingId;
      }

      id = R.id.AudioModulesTitle;
      TextView AudioModulesTitle = ViewBindings.findChildViewById(rootView, id);
      if (AudioModulesTitle == null) {
        break missingId;
      }

      ScrollView AudioView = (ScrollView) rootView;

      id = R.id.OpusBitRate;
      EditText OpusBitRate = ViewBindings.findChildViewById(rootView, id);
      if (OpusBitRate == null) {
        break missingId;
      }

      id = R.id.OpusBitRateTitle;
      TextView OpusBitRateTitle = ViewBindings.findChildViewById(rootView, id);
      if (OpusBitRateTitle == null) {
        break missingId;
      }

      id = R.id.OpusPacketLoss;
      EditText OpusPacketLoss = ViewBindings.findChildViewById(rootView, id);
      if (OpusPacketLoss == null) {
        break missingId;
      }

      id = R.id.OpusPacketLossTitle;
      TextView OpusPacketLossTitle = ViewBindings.findChildViewById(rootView, id);
      if (OpusPacketLossTitle == null) {
        break missingId;
      }

      id = R.id.VolumeSpinner;
      Spinner VolumeSpinner = ViewBindings.findChildViewById(rootView, id);
      if (VolumeSpinner == null) {
        break missingId;
      }

      id = R.id.VolumeTitle;
      TextView VolumeTitle = ViewBindings.findChildViewById(rootView, id);
      if (VolumeTitle == null) {
        break missingId;
      }

      return new ActivityAudioBinding((ScrollView) rootView, Aec, AecTitle, AudioModulesList,
          AudioModulesTitle, AudioView, OpusBitRate, OpusBitRateTitle, OpusPacketLoss,
          OpusPacketLossTitle, VolumeSpinner, VolumeTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
