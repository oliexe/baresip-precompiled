// Generated by view binder compiler. Do not edit!
package com.tutpro.baresip.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AutoCompleteTextView;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.tutpro.baresip.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CallTransferDialogBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final CheckBox attended;

  @NonNull
  public final TextView attendedTitle;

  @NonNull
  public final CheckBox blind;

  @NonNull
  public final RelativeLayout blindOrAttended;

  @NonNull
  public final TextView blindTitle;

  @NonNull
  public final TextView title;

  @NonNull
  public final TextView transferDestination;

  @NonNull
  public final AutoCompleteTextView transferUri;

  private CallTransferDialogBinding(@NonNull LinearLayout rootView, @NonNull CheckBox attended,
      @NonNull TextView attendedTitle, @NonNull CheckBox blind,
      @NonNull RelativeLayout blindOrAttended, @NonNull TextView blindTitle,
      @NonNull TextView title, @NonNull TextView transferDestination,
      @NonNull AutoCompleteTextView transferUri) {
    this.rootView = rootView;
    this.attended = attended;
    this.attendedTitle = attendedTitle;
    this.blind = blind;
    this.blindOrAttended = blindOrAttended;
    this.blindTitle = blindTitle;
    this.title = title;
    this.transferDestination = transferDestination;
    this.transferUri = transferUri;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CallTransferDialogBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CallTransferDialogBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.call_transfer_dialog, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CallTransferDialogBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.attended;
      CheckBox attended = ViewBindings.findChildViewById(rootView, id);
      if (attended == null) {
        break missingId;
      }

      id = R.id.attendedTitle;
      TextView attendedTitle = ViewBindings.findChildViewById(rootView, id);
      if (attendedTitle == null) {
        break missingId;
      }

      id = R.id.blind;
      CheckBox blind = ViewBindings.findChildViewById(rootView, id);
      if (blind == null) {
        break missingId;
      }

      id = R.id.blindOrAttended;
      RelativeLayout blindOrAttended = ViewBindings.findChildViewById(rootView, id);
      if (blindOrAttended == null) {
        break missingId;
      }

      id = R.id.blindTitle;
      TextView blindTitle = ViewBindings.findChildViewById(rootView, id);
      if (blindTitle == null) {
        break missingId;
      }

      id = R.id.title;
      TextView title = ViewBindings.findChildViewById(rootView, id);
      if (title == null) {
        break missingId;
      }

      id = R.id.transferDestination;
      TextView transferDestination = ViewBindings.findChildViewById(rootView, id);
      if (transferDestination == null) {
        break missingId;
      }

      id = R.id.transferUri;
      AutoCompleteTextView transferUri = ViewBindings.findChildViewById(rootView, id);
      if (transferUri == null) {
        break missingId;
      }

      return new CallTransferDialogBinding((LinearLayout) rootView, attended, attendedTitle, blind,
          blindOrAttended, blindTitle, title, transferDestination, transferUri);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
